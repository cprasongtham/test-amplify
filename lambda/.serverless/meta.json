{
  "D:\\works\\snaplogic\\git\\test-amplify\\lambda": {
    "versionSfCore": null,
    "versionFramework": "4.4.12",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>",
      "sls": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "service": "putest-lambda-api",
            "package": {
              "individually": true,
              "exclude": [
                "./**"
              ],
              "artifactsS3KeyDirname": "serverless/putest-lambda-api/dev/code-artifacts",
              "deploymentBucket": "putest-serverless",
              "artifactDirectoryName": "serverless/putest-lambda-api/dev/1732720091106-2024-11-27T15:08:11.106Z"
            },
            "provider": {
              "name": "aws",
              "runtime": "python3.9",
              "region": "us-west-2",
              "memorySize": 128,
              "timeout": 10,
              "deploymentBucket": "putest-serverless",
              "iam": {
                "role": {
                  "statements": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject",
                        "s3:PutObject",
                        "s3:DeleteObject",
                        "s3:ListBucket"
                      ],
                      "Resource": [
                        "arn:aws:s3:::putest-tfstate",
                        "arn:aws:s3:::putest-tfstate/*"
                      ]
                    }
                  ]
                }
              },
              "stage": "dev",
              "versionFunctions": true,
              "deploymentBucketObject": {
                "name": "putest-serverless",
                "maxPreviousDeploymentArtifacts": 3,
                "blockPublicAccess": true
              },
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "HelloworldLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/putest-lambda-api-dev-helloworld"
                    }
                  },
                  "ListUnderscores3LogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/putest-lambda-api-dev-list_s3"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "putest-lambda-api",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/putest-lambda-api-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/putest-lambda-api-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "s3:GetObject",
                                  "s3:PutObject",
                                  "s3:DeleteObject",
                                  "s3:ListBucket"
                                ],
                                "Resource": [
                                  "arn:aws:s3:::putest-tfstate",
                                  "arn:aws:s3:::putest-tfstate/*"
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "putest-lambda-api",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "HelloworldLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "putest-serverless",
                        "S3Key": "serverless/putest-lambda-api/dev/1732720091106-2024-11-27T15:08:11.106Z/helloworld.zip"
                      },
                      "Handler": "helloworld/main.handler",
                      "Runtime": "python3.9",
                      "FunctionName": "putest-lambda-api-dev-helloworld",
                      "MemorySize": 128,
                      "Timeout": 10,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "HelloworldLogGroup"
                    ]
                  },
                  "ListUnderscores3LambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "putest-serverless",
                        "S3Key": "serverless/putest-lambda-api/dev/1732720091106-2024-11-27T15:08:11.106Z/list_s3.zip"
                      },
                      "Handler": "list_s3/main.handler",
                      "Runtime": "python3.9",
                      "FunctionName": "putest-lambda-api-dev-list_s3",
                      "MemorySize": 128,
                      "Timeout": 10,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ListUnderscores3LogGroup"
                    ]
                  },
                  "HelloworldLambdaVersionYHNBdeq3kmqJQe46NFG5zSi7IpHSyOKyovXjnvoOt7M": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "HelloworldLambdaFunction"
                      },
                      "CodeSha256": "zfhkRsPzuJTkd6dVIsmD014vrFBZkUyfj9qDfW4SBOw="
                    }
                  },
                  "ListUnderscores3LambdaVersionMJaweNuAbhmkMUEXBczQFD02yrzbHMFYAE4ELXmI8": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ListUnderscores3LambdaFunction"
                      },
                      "CodeSha256": "hPi1TU/rxA083uZq46KX9LHwERIxKyQ0jVbixX1tIYs="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-putest-lambda-api",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceHello": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "hello",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceLists3": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "list_s3",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodHelloOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceHello"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodLists3Options": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceLists3"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodHelloGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceHello"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "HelloworldLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "HelloworldLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodLists3Get": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceLists3"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "ListUnderscores3LambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "ListUnderscores3LambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayDeployment1732720082858": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodHelloOptions",
                      "ApiGatewayMethodLists3Options",
                      "ApiGatewayMethodHelloGet",
                      "ApiGatewayMethodLists3Get"
                    ]
                  },
                  "HelloworldLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "HelloworldLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ListUnderscores3LambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ListUnderscores3LambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "putest-serverless",
                    "Export": {
                      "Name": "sls-putest-lambda-api-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "HelloworldLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "HelloworldLambdaVersionYHNBdeq3kmqJQe46NFG5zSi7IpHSyOKyovXjnvoOt7M"
                    },
                    "Export": {
                      "Name": "sls-putest-lambda-api-dev-HelloworldLambdaFunctionQualifiedArn"
                    }
                  },
                  "ListUnderscores3LambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ListUnderscores3LambdaVersionMJaweNuAbhmkMUEXBczQFD02yrzbHMFYAE4ELXmI8"
                    },
                    "Export": {
                      "Name": "sls-putest-lambda-api-dev-ListUnderscores3LambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-putest-lambda-api-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "helloworld": {
                "handler": "helloworld/main.handler",
                "package": {
                  "include": [
                    "helloworld/main.py"
                  ],
                  "artifact": "D:\\works\\snaplogic\\git\\test-amplify\\lambda\\.serverless\\helloworld.zip"
                },
                "events": [
                  {
                    "http": {
                      "path": "hello",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "putest-lambda-api-dev-helloworld",
                "memory": 128,
                "timeout": 10,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "HelloworldLambdaVersionYHNBdeq3kmqJQe46NFG5zSi7IpHSyOKyovXjnvoOt7M"
              },
              "list_s3": {
                "handler": "list_s3/main.handler",
                "package": {
                  "include": [
                    "list_s3/main.py"
                  ],
                  "artifact": "D:\\works\\snaplogic\\git\\test-amplify\\lambda\\.serverless\\list_s3.zip"
                },
                "events": [
                  {
                    "http": {
                      "path": "list_s3",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "putest-lambda-api-dev-list_s3",
                "memory": 128,
                "timeout": 10,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "ListUnderscores3LambdaVersionMJaweNuAbhmkMUEXBczQFD02yrzbHMFYAE4ELXmI8"
              }
            }
          },
          "configFileDirPath": "D:\\works\\snaplogic\\git\\test-amplify\\lambda",
          "config": {
            "type": "sls"
          },
          "options": {},
          "stage": "dev",
          "dashboard": null,
          "logger": {
            "namespace": "s:core:resolver:sls",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "D:\\works\\snaplogic\\git\\test-amplify\\lambda",
    "serviceConfigFileName": "serverless.yaml",
    "service": {
      "service": "putest-lambda-api",
      "package": {
        "individually": true,
        "exclude": [
          "./**"
        ],
        "artifactsS3KeyDirname": "serverless/putest-lambda-api/dev/code-artifacts",
        "deploymentBucket": "putest-serverless",
        "artifactDirectoryName": "serverless/putest-lambda-api/dev/1732720091106-2024-11-27T15:08:11.106Z"
      },
      "provider": {
        "name": "aws",
        "runtime": "python3.9",
        "region": "us-west-2",
        "memorySize": 128,
        "timeout": 10,
        "deploymentBucket": "putest-serverless",
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "s3:GetObject",
                  "s3:PutObject",
                  "s3:DeleteObject",
                  "s3:ListBucket"
                ],
                "Resource": [
                  "arn:aws:s3:::putest-tfstate",
                  "arn:aws:s3:::putest-tfstate/*"
                ]
              }
            ]
          }
        },
        "stage": "dev",
        "versionFunctions": true,
        "deploymentBucketObject": {
          "name": "putest-serverless",
          "maxPreviousDeploymentArtifacts": 3,
          "blockPublicAccess": true
        },
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "HelloworldLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/putest-lambda-api-dev-helloworld"
              }
            },
            "ListUnderscores3LogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/putest-lambda-api-dev-list_s3"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "putest-lambda-api",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/putest-lambda-api-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/putest-lambda-api-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:GetObject",
                            "s3:PutObject",
                            "s3:DeleteObject",
                            "s3:ListBucket"
                          ],
                          "Resource": [
                            "arn:aws:s3:::putest-tfstate",
                            "arn:aws:s3:::putest-tfstate/*"
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "putest-lambda-api",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "HelloworldLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "putest-serverless",
                  "S3Key": "serverless/putest-lambda-api/dev/1732720091106-2024-11-27T15:08:11.106Z/helloworld.zip"
                },
                "Handler": "helloworld/main.handler",
                "Runtime": "python3.9",
                "FunctionName": "putest-lambda-api-dev-helloworld",
                "MemorySize": 128,
                "Timeout": 10,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "HelloworldLogGroup"
              ]
            },
            "ListUnderscores3LambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "putest-serverless",
                  "S3Key": "serverless/putest-lambda-api/dev/1732720091106-2024-11-27T15:08:11.106Z/list_s3.zip"
                },
                "Handler": "list_s3/main.handler",
                "Runtime": "python3.9",
                "FunctionName": "putest-lambda-api-dev-list_s3",
                "MemorySize": 128,
                "Timeout": 10,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ListUnderscores3LogGroup"
              ]
            },
            "HelloworldLambdaVersionYHNBdeq3kmqJQe46NFG5zSi7IpHSyOKyovXjnvoOt7M": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "HelloworldLambdaFunction"
                },
                "CodeSha256": "zfhkRsPzuJTkd6dVIsmD014vrFBZkUyfj9qDfW4SBOw="
              }
            },
            "ListUnderscores3LambdaVersionMJaweNuAbhmkMUEXBczQFD02yrzbHMFYAE4ELXmI8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ListUnderscores3LambdaFunction"
                },
                "CodeSha256": "hPi1TU/rxA083uZq46KX9LHwERIxKyQ0jVbixX1tIYs="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-putest-lambda-api",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceHello": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "hello",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceLists3": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "list_s3",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodHelloOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceHello"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodLists3Options": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceLists3"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodHelloGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceHello"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "HelloworldLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "HelloworldLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodLists3Get": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceLists3"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ListUnderscores3LambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ListUnderscores3LambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1732720082858": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodHelloOptions",
                "ApiGatewayMethodLists3Options",
                "ApiGatewayMethodHelloGet",
                "ApiGatewayMethodLists3Get"
              ]
            },
            "HelloworldLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "HelloworldLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ListUnderscores3LambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ListUnderscores3LambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "putest-serverless",
              "Export": {
                "Name": "sls-putest-lambda-api-dev-ServerlessDeploymentBucketName"
              }
            },
            "HelloworldLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "HelloworldLambdaVersionYHNBdeq3kmqJQe46NFG5zSi7IpHSyOKyovXjnvoOt7M"
              },
              "Export": {
                "Name": "sls-putest-lambda-api-dev-HelloworldLambdaFunctionQualifiedArn"
              }
            },
            "ListUnderscores3LambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ListUnderscores3LambdaVersionMJaweNuAbhmkMUEXBczQFD02yrzbHMFYAE4ELXmI8"
              },
              "Export": {
                "Name": "sls-putest-lambda-api-dev-ListUnderscores3LambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-putest-lambda-api-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "helloworld": {
          "handler": "helloworld/main.handler",
          "package": {
            "include": [
              "helloworld/main.py"
            ],
            "artifact": "D:\\works\\snaplogic\\git\\test-amplify\\lambda\\.serverless\\helloworld.zip"
          },
          "events": [
            {
              "http": {
                "path": "hello",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "putest-lambda-api-dev-helloworld",
          "memory": 128,
          "timeout": 10,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "HelloworldLambdaVersionYHNBdeq3kmqJQe46NFG5zSi7IpHSyOKyovXjnvoOt7M"
        },
        "list_s3": {
          "handler": "list_s3/main.handler",
          "package": {
            "include": [
              "list_s3/main.py"
            ],
            "artifact": "D:\\works\\snaplogic\\git\\test-amplify\\lambda\\.serverless\\list_s3.zip"
          },
          "events": [
            {
              "http": {
                "path": "list_s3",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "putest-lambda-api-dev-list_s3",
          "memory": 128,
          "timeout": 10,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "ListUnderscores3LambdaVersionMJaweNuAbhmkMUEXBczQFD02yrzbHMFYAE4ELXmI8"
        }
      }
    },
    "serviceRawFile": "service: putest-lambda-api\r\n\r\npackage:\r\n  individually: true\r\n  exclude:\r\n    - ./**\r\n    \r\nprovider:\r\n  name: aws\r\n  runtime: python3.9\r\n  region: us-west-2\r\n  memorySize: 128\r\n  timeout: 10\r\n  deploymentBucket:\r\n    name: putest-serverless\r\n    maxPreviousDeploymentArtifacts: 3\r\n    blockPublicAccess: true\r\n  iam:\r\n    role:\r\n      statements:\r\n        - Effect: Allow\r\n          Action:\r\n            - s3:GetObject\r\n            - s3:PutObject\r\n            - s3:DeleteObject\r\n            - s3:ListBucket\r\n          Resource:\r\n            - arn:aws:s3:::putest-tfstate\r\n            - arn:aws:s3:::putest-tfstate/*\r\n  \r\n\r\nfunctions:\r\n  helloworld:\r\n    handler: helloworld/main.handler\r\n    package:\r\n      include:\r\n        - 'helloworld/main.py'\r\n    events:\r\n      - http:\r\n          path: hello\r\n          method: get\r\n          cors: true\r\n  list_s3:\r\n    handler: list_s3/main.handler\r\n    package:\r\n      include:\r\n        - 'list_s3/main.py'\r\n    events:\r\n      - http:\r\n          path: list_s3\r\n          method: get\r\n          cors: true\r\n    \r\n\r\n\r\n\r\n# plugins:\r\n#   - serverless-python-requirements\r\n\r\n# custom:\r\n#   pythonRequirements:\r\n#     dockerizePip: true\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "8f78b90db6316e7d0f89a7a22e412349",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "ee757443-7286-4a50-a84d-cc92d6123b5f",
    "orgName": "goupin009",
    "userId": "t6nY8mRZpsrYHgBP7h",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "goupin009",
    "subscription": null,
    "userEmail": "goupin009@gmail.com",
    "serviceProviderAwsRegion": "us-west-2",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "668558227586",
    "projectType": "traditional",
    "versionSf": "4.4.12",
    "serviceProviderAwsCfStackName": "putest-lambda-api-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:us-west-2:668558227586:stack/putest-lambda-api-dev/e10a96b0-accf-11ef-86ad-0a817a8c9f59",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-west-2:668558227586:stack/putest-lambda-api-dev/e10a96b0-accf-11ef-86ad-0a817a8c9f59",
    "serviceProviderAwsCfStackCreated": "2024-11-27T14:57:10.864Z",
    "serviceProviderAwsCfStackUpdated": "2024-11-27T15:08:20.535Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "HelloworldLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:668558227586:function:putest-lambda-api-dev-helloworld:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-putest-lambda-api-dev-HelloworldLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ListUnderscores3LambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:668558227586:function:putest-lambda-api-dev-list_s3:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-putest-lambda-api-dev-ListUnderscores3LambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://jzkjog83c3.execute-api.us-west-2.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-putest-lambda-api-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "putest-serverless",
        "ExportName": "sls-putest-lambda-api-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}